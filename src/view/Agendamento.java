/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import db.Arquivos;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import marcarconsulta.Consulta;
import pessoas.Medico;
import pessoas.Paciente;

/**
 *
 * @author pedro
 */
public class Agendamento extends javax.swing.JFrame {
    MaskFormatter dataBusca;
    ArrayList<String> horariosFormatados = new ArrayList();
    
    /**
     * Creates new form Agendamento
     */
    
    public Agendamento() {

        initComponents();
        
        // Inicializando os possíveis horários das consultas
        horariosFormatados.add("07:00");
        horariosFormatados.add("08:00");
        horariosFormatados.add("09:00");
        horariosFormatados.add("10:00");
        horariosFormatados.add("11:00");
        horariosFormatados.add("13:00");
        horariosFormatados.add("14:00");
        horariosFormatados.add("15:00");
        horariosFormatados.add("16:00");
        horariosFormatados.add("17:00");
        horariosFormatados.add("18:00");
        horariosFormatados.add("19:00");
        
        // Definindo o limite inferior de data
        
        LocalDate dataAtual = LocalDate.now();
        dataAtual = dataAtual.minusDays(1);
        
        Calendar calendario = Calendar.getInstance();
        calendario.set(dataAtual.getYear(), dataAtual.getMonthValue()-1, dataAtual.getDayOfMonth());
        
        comboData.setMinDate(calendario);
    

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMedicos = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePessoas = new javax.swing.JTable();
        txtPessoa = new javax.swing.JTextField();
        btnPessoas = new javax.swing.JButton();
        btnHorarios = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtMedico = new javax.swing.JTextField();
        btnMedicos = new javax.swing.JButton();
        comboHorarios = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        btnAgendar = new javax.swing.JButton();
        comboData = new datechooser.beans.DateChooserCombo();
        jPanel2 = new javax.swing.JPanel();
        CloseLbl = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        MinimizeLbl = new javax.swing.JLabel();
        logoLbl = new javax.swing.JLabel();
        txtPessoa1 = new javax.swing.JTextField();
        btnPessoas1 = new javax.swing.JButton();
        btnHorarios1 = new javax.swing.JButton();
        btnAgendar1 = new javax.swing.JButton();
        comboData1 = new datechooser.beans.DateChooserCombo();
        jLabel7 = new javax.swing.JLabel();
        txtMedico1 = new javax.swing.JTextField();
        btnMedicos1 = new javax.swing.JButton();
        comboHorarios1 = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(102, 51, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Informe a data da consulta");

        tableMedicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nome", "Especialidade", "CRM"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableMedicos);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Busque um paciente");

        tablePessoas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nome", "Sexo", "E-mail"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablePessoas);

        btnPessoas.setBackground(new java.awt.Color(34, 167, 240));
        btnPessoas.setForeground(new java.awt.Color(255, 255, 255));
        btnPessoas.setText("Buscar");
        btnPessoas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPessoasActionPerformed(evt);
            }
        });

        btnHorarios.setBackground(new java.awt.Color(34, 167, 240));
        btnHorarios.setForeground(new java.awt.Color(255, 255, 255));
        btnHorarios.setText("Listar Horários");
        btnHorarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHorariosActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Busque um médico");

        btnMedicos.setBackground(new java.awt.Color(34, 167, 240));
        btnMedicos.setForeground(new java.awt.Color(255, 255, 255));
        btnMedicos.setText("Buscar");
        btnMedicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedicosActionPerformed(evt);
            }
        });

        comboHorarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboHorariosActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Horários livres");

        btnAgendar.setBackground(new java.awt.Color(34, 167, 240));
        btnAgendar.setForeground(new java.awt.Color(255, 255, 255));
        btnAgendar.setText("Agendar");
        btnAgendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgendarActionPerformed(evt);
            }
        });

        comboData.setCurrentView(new datechooser.view.appearance.AppearancesList("Light",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    comboData.setFormat(2);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(81, 81, 81)
                            .addComponent(comboHorarios, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(comboData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(61, 61, 61)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnHorarios)
                        .addComponent(btnAgendar))
                    .addGap(22, 266, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jScrollPane1)
                    .addContainerGap())
                .addComponent(jScrollPane2)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(38, 38, 38)
                            .addComponent(txtMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(41, 41, 41)
                            .addComponent(btnMedicos))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(57, 57, 57)
                            .addComponent(txtPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(43, 43, 43)
                            .addComponent(btnPessoas)))
                    .addGap(0, 0, Short.MAX_VALUE))))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel3)
                .addComponent(txtPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnPessoas))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(30, 30, 30)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel4)
                .addComponent(txtMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnMedicos))
            .addGap(23, 23, 23)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(72, 72, 72)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jLabel2)
                .addComponent(comboData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnHorarios))
            .addGap(37, 37, 37)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel5)
                .addComponent(comboHorarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnAgendar))
            .addGap(29, 29, 29))
    );

    jPanel2.setBackground(new java.awt.Color(34, 167, 240));
    jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

    CloseLbl.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
    CloseLbl.setForeground(new java.awt.Color(255, 255, 255));
    CloseLbl.setText("X");
    CloseLbl.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            CloseLblMouseClicked(evt);
        }
    });

    jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
    jLabel6.setForeground(new java.awt.Color(255, 255, 255));
    jLabel6.setText("Agendar Consulta");

    MinimizeLbl.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
    MinimizeLbl.setForeground(new java.awt.Color(255, 255, 255));
    MinimizeLbl.setText("-");
    MinimizeLbl.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            MinimizeLblMouseClicked(evt);
        }
    });

    logoLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/logo.png"))); // NOI18N

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addGap(19, 19, 19)
            .addComponent(logoLbl)
            .addGap(18, 18, 18)
            .addComponent(jLabel6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(MinimizeLbl)
            .addGap(18, 18, 18)
            .addComponent(CloseLbl)
            .addGap(35, 35, 35))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(logoLbl)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CloseLbl)
                    .addComponent(MinimizeLbl)
                    .addComponent(jLabel6)))
            .addGap(9, 9, 9))
    );

    btnPessoas1.setText("Buscar");
    btnPessoas1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnPessoasActionPerformed(evt);
        }
    });

    btnHorarios1.setText("Listar Horários");
    btnHorarios1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnHorariosActionPerformed(evt);
        }
    });

    btnAgendar1.setText("Agendar");
    btnAgendar1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnAgendarActionPerformed(evt);
        }
    });

    try {
        comboData1.setDefaultPeriods(new datechooser.model.multiple.PeriodSet(new datechooser.model.multiple.Period(new java.util.GregorianCalendar(2020, 10, 28),
            new java.util.GregorianCalendar(2020, 10, 28))));
} catch (datechooser.model.exeptions.IncompatibleDataExeption e1) {
    e1.printStackTrace();
    }

    jLabel7.setText("Busque um médico");

    btnMedicos1.setText("Buscar");
    btnMedicos1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnMedicosActionPerformed(evt);
        }
    });

    comboHorarios1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            comboHorariosActionPerformed(evt);
        }
    });

    jLabel8.setText("Horários livres");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, 0)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnHorariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHorariosActionPerformed
        // TODO add your handling code here:
        
        comboHorarios.removeAllItems();
        

        if(!tablePessoas.getSelectionModel().isSelectionEmpty() && !tableMedicos.getSelectionModel().isSelectionEmpty()) {
            String crm = tableMedicos.getValueAt(tableMedicos.getSelectedRow(), 2).toString();
            
            for(int i = 0; i < LoginForm.medicosDb.size(); i++) {
                Medico medico = LoginForm.medicosDb.get(i);
                
                if(medico.getInscricaoCRM().equals(crm)) {
                    
                    // Caso o médico já tenha algum horário marcado naquele dia
                    if(!medico.getAgenda().containsKey(comboData.getText())) {

                        Map<String, String> agenda = medico.getAgenda();
                        agenda.put(comboData.getText(), "000000000000");
                        medico.setAgenda(agenda);
                        
                        
                    } 
                    String horarios = medico.getAgenda().get(comboData.getText()).toString();
                    
                    for(int j = 0; j < horarios.length(); j++) {
                        if(horarios.charAt(j) == '0')
                            comboHorarios.addItem(horariosFormatados.get(j));
                    } 

                }   
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um médico e um paciente para poder listar horários", "Erro", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnHorariosActionPerformed

    private void btnPessoasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPessoasActionPerformed
        // TODO add your handling code here:
        
        
        
        String busca = txtPessoa.getText().trim();
        
        DefaultTableModel tabelaPessoa = (DefaultTableModel) tablePessoas.getModel();
        
        tabelaPessoa.setNumRows(0);
        
        for(int i = 0; i < LoginForm.pacientesDb.size(); i++) {
            Paciente p = LoginForm.pacientesDb.get(i);
            
            if(p.getNome().toLowerCase().contains(busca.toLowerCase()))
                tabelaPessoa.addRow(new Object[]{p.getNome(), p.getSexo(), p.getEmail()});
                
        }
    }//GEN-LAST:event_btnPessoasActionPerformed

    private void btnMedicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedicosActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel tabela = (DefaultTableModel) tableMedicos.getModel();
        
        tabela.setNumRows(0);
        
        for(int i = 0; i < LoginForm.medicosDb.size(); i++) {
            Medico m = LoginForm.medicosDb.get(i);
//            System.out.println(m.getNome());
            if(m.getNome().toLowerCase().contains(txtMedico.getText().trim().toLowerCase()))
                tabela.addRow(new Object[]{m.getNome(), m.getEspecialidade(), m.getInscricaoCRM()});
        }
        
        
    }//GEN-LAST:event_btnMedicosActionPerformed

    private void comboHorariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboHorariosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboHorariosActionPerformed

    private void btnAgendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgendarActionPerformed
        // TODO add your handling code here:
        
        Paciente paciente = null;
        Medico medico = null;
        
        if(!tablePessoas.getSelectionModel().isSelectionEmpty() && !tableMedicos.getSelectionModel().isSelectionEmpty()) {
            
            String crm = tableMedicos.getValueAt(tableMedicos.getSelectedRow(), 2).toString();
            for(Medico m : LoginForm.medicosDb) { 
                if(m.getInscricaoCRM().equals(crm)) {
                    
                    Map<String, String> agenda = m.getAgenda();
                    
                    // Caso o médico já tenha algum horário marcado naquele dia
                    if(!m.getAgenda().containsKey(comboData.getText())) {
                        agenda.put(comboData.getText(), "000000000000");
                    } 
                    
                    StringBuilder horarios = new StringBuilder(m.getAgenda().get(comboData.getText()).toString());
                        
                    // muda para 1 o elemento na posição respectiva do horário do combobox
                    
                    if(comboHorarios.getSelectedIndex() >= 0) {
                        horarios.setCharAt(horariosFormatados.indexOf(comboHorarios.getSelectedItem()), '1');
                    
                        agenda.put(comboData.getText(), horarios.toString());
                        m.setAgenda(agenda);

                        medico = m;
                        
    
                    } else {
                        JOptionPane.showMessageDialog(null, "O médico requisitado não possui mais horários disponíveis", "Erro", JOptionPane.INFORMATION_MESSAGE);
                    }
                    
                    break;
                }   
            }
           
            String email = tablePessoas.getValueAt(tablePessoas.getSelectedRow(), 2).toString();
            for(Paciente p: LoginForm.pacientesDb){
                if(p.getEmail().equals(email)){
                    paciente = p;
                    break;
                }
            }
            
            // Geramos a consulta do paciente
            if(comboHorarios.getSelectedIndex() >= 0) {
            
                LocalDateTime dataConsulta = LocalDateTime.parse(comboData.getText() + " " + 
                        comboHorarios.getSelectedItem().toString(), DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"));
            
                Consulta consulta = new Consulta(dataConsulta, paciente, medico, 
                        LoginForm.medicosDb.indexOf(medico), LoginForm.pacientesDb.indexOf(paciente));
                
                Arquivos teste = new Arquivos();
                teste.registrar(consulta);
                teste.close();
                
                paciente.addConsulta(consulta);
                medico.addConsulta(consulta);
                
                JOptionPane.showMessageDialog(null, "Consulta agendada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                dispose();
                
            }
        }
        
    }//GEN-LAST:event_btnAgendarActionPerformed

    private void CloseLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CloseLblMouseClicked
        dispose();
    }//GEN-LAST:event_CloseLblMouseClicked

    private void MinimizeLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinimizeLblMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_MinimizeLblMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Agendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Agendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Agendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Agendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Agendamento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CloseLbl;
    private javax.swing.JLabel MinimizeLbl;
    private javax.swing.JButton btnAgendar;
    private javax.swing.JButton btnAgendar1;
    private javax.swing.JButton btnHorarios;
    private javax.swing.JButton btnHorarios1;
    private javax.swing.JButton btnMedicos;
    private javax.swing.JButton btnMedicos1;
    private javax.swing.JButton btnPessoas;
    private javax.swing.JButton btnPessoas1;
    private datechooser.beans.DateChooserCombo comboData;
    private datechooser.beans.DateChooserCombo comboData1;
    private javax.swing.JComboBox<String> comboHorarios;
    private javax.swing.JComboBox<String> comboHorarios1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel logoLbl;
    private javax.swing.JTable tableMedicos;
    private javax.swing.JTable tablePessoas;
    private javax.swing.JTextField txtMedico;
    private javax.swing.JTextField txtMedico1;
    private javax.swing.JTextField txtPessoa;
    private javax.swing.JTextField txtPessoa1;
    // End of variables declaration//GEN-END:variables
}
